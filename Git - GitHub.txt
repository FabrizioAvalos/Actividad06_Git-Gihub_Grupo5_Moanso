*BOTON AGREGAR:

public void InsertarClientes(TextBox paramCodigo, TextBox paramNombre, TextBox paramApellido, TextBox paramDNI, TextBox paramDireccion, TextBox paramTelefono)
{
    string consulta = "INSERT INTO Clientes (Codigo, Nombre, Apellido, Dni, Direccion, Telefono) VALUES (@Codigo, @Nombre, @Apellido, @DNI, @Direccion, @Telefono);";

    try
    {
        using (SqlConnection conexion = Conexion.GetConexion())
        {
            using (SqlCommand cmd = new SqlCommand(consulta, conexion))
            {
                cmd.Parameters.AddWithValue("@Codigo", paramCodigo.Text);
                cmd.Parameters.AddWithValue("@Nombre", paramNombre.Text);
                cmd.Parameters.AddWithValue("@Apellido", paramApellido.Text);
                cmd.Parameters.AddWithValue("@DNI", paramDNI.Text);
                cmd.Parameters.AddWithValue("@Direccion", paramDireccion.Text);
                cmd.Parameters.AddWithValue("@Telefono", paramTelefono.Text);
                cmd.ExecuteNonQuery();
            }
        }
        MessageBox.Show("SE GUARDÓ CORRECTAMENTE");
    }
    catch (Exception e)
    {
        MessageBox.Show("NO SE PUDO GUARDAR: " + e.Message);
    }
}

private void button1_Click(object sender, EventArgs e)
{
    InsertarClientes(txtCodigo, txtNombre, txtApellido, txtDNI,  txtDireccion,txtTelefono);
    MostrarClientes(dataGridView1);
}

*BOTON ELIMINAR:

public void EliminarCliente(string codigoCliente, DataGridView dgvClientes)
{
    if (string.IsNullOrEmpty(codigoCliente))
    {
        MessageBox.Show("El código del cliente no puede estar vacío.");
        return;
    }
    string sql = "DELETE FROM Clientes WHERE Codigo = @Codigo;";
    using (SqlConnection conexion = Conexion.GetConexion())
    {
        if (conexion != null)
        {
            try
            {
                SqlCommand command = new SqlCommand(sql, conexion);
                command.Parameters.AddWithValue("@Codigo", codigoCliente);
                int filasAfectadas = command.ExecuteNonQuery();
                if (filasAfectadas > 0)
                {
                    FiltrarClientes(dgvClientes, txtBuscar.Text.Trim());
                    MessageBox.Show("Cliente eliminado exitosamente.");
                }
                else
                {
                    MessageBox.Show("No se encontró el cliente con el código especificado.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("No se pudo eliminar el cliente, error: " + ex.Message);
            }
        }
    }
}

private void FiltrarClientes(DataGridView dgvClientes, string filtro)
{
    dgvClientes.Rows.Clear();

    string sql = "SELECT * FROM Clientes WHERE Codigo LIKE @Filtro OR Nombre LIKE @Filtro OR Apellido LIKE @Filtro;";

    using (SqlConnection conexion = Conexion.GetConexion())
    {
        if (conexion != null)
        {
            try
            {
                SqlCommand command = new SqlCommand(sql, conexion);
                command.Parameters.AddWithValue("@Filtro", "%" + filtro + "%");

                SqlDataAdapter dataAdapter = new SqlDataAdapter(command);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);

                foreach (DataRow row in dataTable.Rows)
                {
                    dgvClientes.Rows.Add(
                        row["Codigo"].ToString(),
                        row["Nombre"].ToString(),
                        row["Apellido"].ToString(),
                        row["Dni"].ToString(),
                        row["Direccion"].ToString(),
                        row["Telefono"].ToString()
                    );
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("No se pudieron mostrar los registros, error: " + ex.Message);
            }
        }
    }
}

private void button3_Click(object sender, EventArgs e)
{
    if (dataGridView1.SelectedRows.Count > 0)
    {
        string codigoCliente = dataGridView1.SelectedRows[0].Cells["Codigo"].Value.ToString();
        EliminarCliente(codigoCliente, dataGridView1);
    }
    else
    {
        MessageBox.Show("Por favor, seleccione un cliente para eliminar.");
    }
}

BOTON MODIFICAR:

public void ModificarCliente(TextBox paramCodigo, TextBox paramNombre, TextBox paramApellido, TextBox paramDNI, TextBox paramDireccion, TextBox paramTelefono)
{
    string consulta = "UPDATE Clientes SET Nombre = @Nombre, Apellido = @Apellido, dni = @DNI, " +
                      "Direccion = @Direccion, Telefono = @Telefono WHERE Codigo = @Codigo";

    try
    {
        using (var connection = Conexion.GetConexion())
        {
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
            }

            using (var command = new SqlCommand(consulta, connection))
            {
                command.Parameters.AddWithValue("@Nombre", paramNombre.Text);
                command.Parameters.AddWithValue("@Apellido", paramApellido.Text);
                command.Parameters.AddWithValue("@DNI", paramDNI.Text);
                command.Parameters.AddWithValue("@Direccion", paramDireccion.Text);
                command.Parameters.AddWithValue("@Telefono", paramTelefono.Text);
                command.Parameters.AddWithValue("@Codigo", paramCodigo.Text);

                command.ExecuteNonQuery();
            }
        }

        MessageBox.Show("SE MODIFICÓ CORRECTAMENTE");
    }
    catch (Exception e)
    {
        MessageBox.Show("NO SE MODIFICÓ CORRECTAMENTE: " + e.Message);
    }
}

public void SeleccionarCliente(DataGridView paramTablaAlumnos, TextBox paramCodigo, TextBox paramNombre, TextBox paramApellido, TextBox paramDNI, TextBox paramDireccion, TextBox paramTelefono)
{
    try
    {
        int fila = paramTablaAlumnos.SelectedCells[0].RowIndex;
        if (fila >= 0)
        {
            paramCodigo.Text = paramTablaAlumnos.Rows[fila].Cells[0].Value.ToString();
            paramNombre.Text = paramTablaAlumnos.Rows[fila].Cells[1].Value.ToString();
            paramApellido.Text = paramTablaAlumnos.Rows[fila].Cells[2].Value.ToString();
            paramDNI.Text = paramTablaAlumnos.Rows[fila].Cells[3].Value.ToString();
            paramDireccion.Text = paramTablaAlumnos.Rows[fila].Cells[4].Value.ToString();
            paramTelefono.Text = paramTablaAlumnos.Rows[fila].Cells[5].Value.ToString();
        }
        else
        {
            MessageBox.Show("No se seleccionó registro");
        }
    }
    catch (Exception e)
    {
        MessageBox.Show("Error de selección: " + e.Message);
    }
}

private void dataGridView1_MouseClick(object sender, MouseEventArgs e)
{
    SeleccionarCliente(dataGridView1, txtCodigo, txtNombre, txtApellido, txtDNI, txtDireccion, txtTelefono);
}


BOTON ORDENAR: 

public void CargarDatosOrdenados(DataGridView dgvClientes)
{
    string sql = "SELECT * FROM Clientes ORDER BY Nombre ASC";

    using (SqlConnection conexion = Conexion.GetConexion())
    {
        if (conexion != null)
        {
            try
            {
                SqlDataAdapter dataAdapter = new SqlDataAdapter(sql, conexion);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);
                dgvClientes.Rows.Clear();
                foreach (DataRow row in dataTable.Rows)
                {
                    dgvClientes.Rows.Add(
                        row["Codigo"].ToString(),
                        row["Nombre"].ToString(),
                        row["Apellido"].ToString(),
                        row["DNI"].ToString(),
                        row["Direccion"].ToString(),
                        row["Telefono"].ToString()
                    );
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al cargar los datos: " + ex.Message);
            }
        }
    }
}

private void button4_Click(object sender, EventArgs e)
{
    CargarDatosOrdenados(dataGridView1);
}

BUSCAR:

private void FiltrarClientes(DataGridView dgvClientes, string filtro)
{
    dgvClientes.Rows.Clear();

    string sql = "SELECT * FROM Clientes WHERE Codigo LIKE @Filtro OR Nombre LIKE @Filtro OR Apellido LIKE @Filtro;";

    using (SqlConnection conexion = Conexion.GetConexion())
    {
        if (conexion != null)
        {
            try
            {
                SqlCommand command = new SqlCommand(sql, conexion);
                command.Parameters.AddWithValue("@Filtro", "%" + filtro + "%");

                SqlDataAdapter dataAdapter = new SqlDataAdapter(command);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);

                foreach (DataRow row in dataTable.Rows)
                {
                    dgvClientes.Rows.Add(
                        row["Codigo"].ToString(),
                        row["Nombre"].ToString(),
                        row["Apellido"].ToString(),
                        row["Dni"].ToString(),
                        row["Direccion"].ToString(),
                        row["Telefono"].ToString()
                    );
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("No se pudieron mostrar los registros, error: " + ex.Message);
            }
        }
    }
}

private void txtBuscar_TextChanged(object sender, EventArgs e)
{
    string filtro = txtBuscar.Text.Trim();
    FiltrarClientes(dataGridView1, filtro);
}


MOSTRAR CLIENTES:

public void MostrarClientes(DataGridView dgvClientes)
{
    dgvClientes.Rows.Clear();
    string sql = "SELECT * FROM Clientes;";

    using (SqlConnection conexion = Conexion.GetConexion())
    {
        if (conexion != null)
        {
            try
            {
                SqlDataAdapter dataAdapter = new SqlDataAdapter(sql, conexion);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);

                foreach (DataRow row in dataTable.Rows)
                {
                    dgvClientes.Rows.Add(
                        row["CODIGO"].ToString(),
                        row["NOMBRE"].ToString(),
                        row["APELLIDO"].ToString(),
                        row["DNI"].ToString(),
                        row["DIRECCION"].ToString(),
                        row["TELEFONO"].ToString()
                    );
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("No se mostraron los registros, error: " + ex.Message);
            }
        }
    }
}